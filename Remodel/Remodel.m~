function [Ablated,Cell,X,T,C,Cv,Y,N,L,Ln,L0,Stress,X0,Y0,Xn,Yn,xExternal,Set,x,dof,Ymid]=Remodel...
    (Ablated,Cell,X,T,C,Cv,Y,L,Ln,L0,Stress,X0,Y0,Xn,xExternal,Set,Ymid)
%%
% Remodels Nodal network and associated vertices according to Modified
% Delaunay Criteria. Updates Cell database accordingly.
%
% TEST SortExternal:
% sExt=SortExternal(xExternal,Cb,Edges);trimesh(Cb,X(:,1),X(:,2));hold on; plot(X(sExt(5:10),1),X(sExt(5:10),2),'bo','LineWidth',4);hold off
% sExt=xExternal;trimesh(Cb,X(:,1),X(:,2));hold on; plot(X(sExt,1),X(sExt,2),'bo','LineWidth',4);hold off
Tn=T;
%% Copy Data
[~,CellOld,COld,CvOld,LOld,LnOld,StressOld,YOld,TOld,L0Old,YmidOld]=CopyData(Ablated,Cell,C,Cv,L,Ln,Stress,Y,T,L0,Ymid);


%% Get list of bottom and top cells
[Set,Tb,Tt,X,X0,Xb,Xt]=XbXt(Cell,Set,T,X,X0);
Xbt=zeros(size(Xt));
Xbt(Xb)=Xt; % Transformation from top bottom to top

if  Set.ModelTop ==3
    %% Different Top/Bottom
    % ------------------------ Triangularize-------------------------------
    %     Xi=X;
    %     Xi(xExternal,:)=X0(xExternal,:); % Prevent incremental connectivity switching at boundary
    %     xExtB=find(ismember(Xb,xExternal));
    [Cb,Edges]=delaunayF(Tb,X(Xb,1),X(Xb,2),Set.RemodelTolF,Set.RemodelDelta); % Delaunay with filtering on boundary
    Ct=delaunayF(Tt-Set.nodes/2,X(Xt,1),X(Xt,2),Set.RemodelTolF,Set.RemodelDelta); % Delaunay with filtering on boundary
    Cb=[Xb(Cb(:,1)) Xb(Cb(:,2)) Xb(Cb(:,3))]; % Global numbers
    Ct=[Xt(Ct(:,1)) Xt(Ct(:,2)) Xt(Ct(:,3))]; % Global numbers
    % --------------------- Vertex positions and updated x ----------------
    [nTrianglesB,Y,nTrianglesT]=GetY(Cb,Ct,X);
    Set.nvert=nTrianglesB+nTrianglesT;
    T=[Cb; Ct];
    N=ones(nTrianglesB+nTrianglesT,3)/3;
    %  ---------------------  Remodel Wound Ring -------------------------
    [Y,Ablated,Set,T,N,VNew2OldRing,Cb,Ct,Edges,~]=RemodelWoundEdge...
        (Ablated,Y,Set,T,N,YOld,CellOld,X,Cb,Ct,Edges);
    % Search triangles per node
    [nTriNodeB,TriNodeB,nTriNodeT,TriNodeT]=ConnectivityTri(Cb,Set.nodes,Ct);
    % Find internal/external nodes
    [xInternalB,xExternal]=ExternalInternal(Cb,Edges);
    % xExternalT=xExternalB+Set.nodes/2;
    xInternalT=xInternalB+Set.nodes/2;
    if Ablated.Exist
        Cell=xBottvbotDA(Cb,CellOld,nTriNodeB,TriNodeB,Y,Ct,nTriNodeT,TriNodeT,Ablated);
    else
        Cell=xBottvbot(Cb,CellOld,xInternalB,nTriNodeB,TriNodeB,Y,Ct,xInternalT,nTriNodeT,TriNodeT);
    end
    
    [Cv,Cell,Y,Set,Ymid]=MatrixCvDiffTB(Cell,Cb,Ct,Y,Set,Ablated);
    C=MatrixC(Cb,nTriNodeB,TriNodeB,Xb,Xbt,Xt,Ct,nTriNodeT,TriNodeT);
    % Update data
    T=[T;zeros(Set.nMidY,3)];
    N=[N;zeros(Set.nMidY,3)];
    [Ablated]=UpdateAblation(Ablated,Set,Cell,Cv,C,Ymid);
    [VNew2Old,Y,Y0]=MapVertices(Y,T,TOld,Cv,CvOld,YOld,Ymid,Set,VNew2OldRing,Ablated,YmidOld,Y0);
    Yn=Y;
    x=[reshape(X',Set.nodes*Set.dim,1);reshape(Y',Set.nvert*Set.dim,1)]; % row of displacements
    % Update Lengths and dof
    if Set.iIncr>0
        [L,Ln,L0,Stress]=RemodelLS(C,COld,Cv,CvOld,LnOld,LOld,StressOld,X,X0,Y,VNew2Old,L0Old);
        % set dof
        xExternal(ismember(xExternal,Ablated.NRingBot))=[];
        [~,dofP,~]=BC(Set,X,xExternal);
        [dof]=GetDofs(Ablated,Set,dofP,Ymid);
    end
else
    %% Same Top/Bottom
    % ------------------------ Triangularize-------------------------------
    Xi=X;
    Xi(xExternal,:)=X0(xExternal,:); % Prevent incremental connectivity switching at boundary
    xExtB=find(ismember(Xb,xExternal));
    [Cb,Edges]=delaunayF(Tb,Xi(Xb,1),Xi(Xb,2),Set.RemodelTolF,Set.RemodelDelta,xExtB,Set.RemodelExternal,Set.RemodelEntangled); % Delaunay with filtering on boundary
    fprintf('size(Cb)=%i %i\n',size(Cb));
    Cb=[Xb(Cb(:,1)) Xb(Cb(:,2)) Xb(Cb(:,3))]; % Global numbering
    if size(Cb,1)==121
        Ct=Cb;
    end
    [Cb,Edges,xExt]=PreserveExternal(Ablated,Cb,Edges,xExternal); % Modify connectivity Cb so that no internal node becomes external
    [Cb,Edges]=PreventLargerWound(Ablated,Cb,Edges,xExt); % Modify connectivity if wound has new cells at the wound ring (these will be internalised)
    if min(min(Cb))==0 || size(Cb,1)==145
        [Cb,Edges]=PreventLargerWound(Ablated,Cb,Edges,xExt); % Modify connectivity if wound has new cells at the wound ring (these will be internalised)
    end
    Ct=Cb+size(Xt,1);
    % --------------------- Vertex positions and updated x ----------------
    [nTriangles,Y]=GetY(Cb,Ct,X);
    Set.nvert=2*nTriangles;
    T=[Cb; Ct];
    N=ones(Set.nvert,3)/3;
    %  ---------------------  Remodel Wound Ring -------------------------
    [Y,Ablated,Set,T,N,VNew2OldRing,Cb,~,Edges]=RemodelWoundEdge...
        (Ablated,Y,Set,T,N,YOld,CellOld,X,Cb,Ct,Edges);
    %  --------------------- Search triangles per node
    [nTriNode,TriNode]=ConnectivityTri(Cb,Set.nodes);
    % Find internal/external nodes
    [xInternal,xExternal]=ExternalInternal(Cb,Edges);
    if Ablated.Exist
        Cell=xBottvbotSA(Cb,CellOld,Ablated,nTriNode,TriNode,Y);
    else
        Cell=xBottvbot(Cb,CellOld,xInternal,nTriNode,TriNode,Y);
    end
    C=MatrixC(Cb,nTriNode,TriNode,Xb,Xbt,Xt);
    [Cv,Cell,Y,Set,Ymid]=MatrixCvSameTB(Cell,Y,Set,Ablated);
    % Update data
    T=[T;zeros(Set.nMidY,3)];
    N=[N;zeros(Set.nMidY,3)];
    Ablated=UpdateAblation(Ablated,Set,Cell,Cv,C,Ymid);
    [VNew2Old,Y]=MapVertices(Y,T,TOld,Cv,CvOld,YOld,Ymid,Set,VNew2OldRing,Ablated,YmidOld,Y0);
    Yn=Y;
    x=[reshape(X',Set.nodes*Set.dim,1)
        reshape(Y',Set.nvert*Set.dim,1)]; % row of displacements
    % Update Lengths and dof, and remove nodes at wound ring from xExternal
    if Set.iIncr>0
        [L,Ln,L0,Stress]=RemodelLS(C,COld,Cv,CvOld,LnOld,LOld,StressOld,X,X0,Y,VNew2Old,L0Old);
        % set dof
        xExternal(ismember(xExternal,Ablated.NRingBot))=[];
        [~,dofP,~]=BC(Set,X,xExternal);
        
        dof=GetDofs(Ablated,Set,dofP,Ymid);
    end
end
Ablated.RemodelN(Set.iIncr,:)=CountRemodel(T,Tn,size(Cb,1)); % Bottom and Top remodelling changes
end
%%
function n=CountRemodel(T1,T2,nb)
% Countes number of connectivity changes (remodellings) between two
% connectivity matrices T1 and T2.
% INPUT
% nb=number of bottom nodes
% T1(i,:) : nodes in triangle i of connectivity matrix T1
% Searches elements in T1 that are not in T2
S=[1 2 3
    2 3 1
    3 1 2];
% Remove 0s
T1(T1(:,1)==0,:)=[];
T1(T1(:,2)==0,:)=[];
T1(T1(:,3)==0,:)=[];
T2(T2(:,1)==0,:)=[];
T2(T2(:,2)==0,:)=[];
T2(T2(:,3)==0,:)=[];
% Sort each element, minimum node number first
nele1=size(T1,1);
nele2=size(T2,1);
for e=1:nele1
    Te=T1(e,:);
    s=find(Te==min(Te));
    T1(e,:)=Te(S(s(1),:));
end
for e=1:nele2
    Te=T2(e,:);
    s=find(Te==min(Te));
    T2(e,:)=Te(S(s(1),:));
end
% Sort list of elements
T1=sortrows(T1);
T2=sortrows(T2);
% Compares each element
n=zeros(nele1,1); % All elements not coincident by default
e20=1;
for e1=1:nele1
    e2l=find(T2(e20:end,1)==T1(e1,1))+e20-1;
    if min(size(e2l))>0
        for e2=e2l'
            e20=e2l(1);
            if min(T1(e1,:)==T2(e2,:))==1 % Same element
                n(e1)=1;
                break;
            end
        end
    end
end
nB=sum(n(1:nb)==0);
nT=sum(n(nb+1:end)==0);
n=[nB nT];
end
%%
function [C,Edges,xExt]=PreserveExternal(Ablated,C,Edges,xExt0) % Modify connectivity Cb so that no internal node becomes external
%%
% Modify triangulation in C so that nodes in xExternal are still external,
% and no other nodes becomes external.
% This function only internalsies nodes that have become external. It does
% not externalises nodes that have become internal.
% INPUT:
% xExter0=previous list of external nodes (not in agreement with C and Edges)
% C(i,:) : Nodes forming triangle i
% Edges(i,s)   : Triangle adjacent to side s of triangle i. Side s is
% opposite to node s. if Esges(i,s)==0, side is external.
% OUTPUT:
% Edges
% C
% %
% Compute new set of external nodes.
[~,xExt]=ExternalInternal(C,Edges);
xExt(ismember(xExt,Ablated.NRingBot))=[]; % Remove nodes at wound ring from list xExt
if length(xExt)==length(xExt0)
    if norm(xExt-xExt0)<eps
        return;
    end
end
xExt=SortExternal(xExt,C,Edges);
nExt=length(xExt);
Prev=[nExt 1:nExt-1];
Next=[2:nExt 1];
% Find new external node
k=0;
Cnew=zeros(nExt,3);
EdgesNew=zeros(nExt,3);
ns=zeros(nExt,1);
for i=1:nExt
    n=xExt(i);
    if max(ismember(xExt0,n))==0 % Node was not external: internalise
        n1=xExt(Prev(i));
        n2=xExt(Next(i));
        T1=find(sum(ismember(C,[n n1]),2)==2);
        T2=find(sum(ismember(C,[n n2]),2)==2);
        T1i=find(Edges(T1(1),:)==0); % position of node n in element T1
        T2i=find(Edges(T2(1),:)==0); % position of node n in element T2
        k=k+1;
        Edges(T1(1),T1i(1))=k;
        Edges(T2(1),T2i(1))=k;
        Cnew(k,:)=[n n1 n2]; % New element connectivity
        EdgesNew(k,:)=[0 T2(1) T1(1)]; % Edges in new element
        ns(k)=i;
    end
end
C=[C ; Cnew(1:k,:)];
Edges=[Edges ; EdgesNew(1:k,:)];
xExt(ns(1:k))=[];
end
%%
function [CO,EdgesO]=PreventLargerWound(Ablated,C,Edges,xExt0)
%%
% If a new cell is detected to enter at the wound ring, this cell is internalised.
% Wound should not become larger. Otherwise, RemodelWoundEdge.m will fail
% to form correct set of vertices.
% INPUT
% Ablated   : infromation of ablation before remodelling
% C(i,:)    : nodes forming triangle  i
% Edges(i,e): triangle connected to triangle i at side e (side e is opposite to node e)
% xExt      : nodes at external fo domain (and not at the wound)
% OUTPUT
% C(i,:)    : nodes forming triangle  i
if ~Ablated.Exist
    CO=C;
    EdgesO=Edges;
    return;
end
[~,xExt]=ExternalInternal(C,Edges);
xExt(ismember(xExt,xExt0))=[]; % Only nodes at wound ring
xExt=SortExternal(xExt,C,Edges);
nRing=length(xExt); % Number of nodes in wound ring
nele=size(C,1);
EdgesO=zeros(nele+nRing,3);
CO=zeros(nele+nRing,3);
EdgesO(1:nele,:)=Edges;
CO(1:nele,:)=C;
for i=1:nRing
    if max(ismember(Ablated.NRingBot,xExt(i)))==0 % New node at wound ring
        if i==1
            N=[xExt(2) xExt(1) xExt(end)]; % nodes
        elseif i==nRing
            N=[xExt(1) xExt(end) xExt(end-1)]; % nodes
        else
            N=[xExt(i+1) xExt(i) xExt(i-1)]; % nodes
        end
        e1=find(sum(ismember(C,N(1:2)),2)==2);
        e2=find(sum(ismember(C,N(2:3)),2)==2);
        nele=nele+1;
        EdgesO(e1,EdgesO(e1,:)==0)=nele;
        EdgesO(e2,EdgesO(e2,:)==0)=nele;
        EdgesO(nele,:)=[e2 0 e1];
        CO(nele,:)=N;
    end
end
EdgesO(nele+1:end,:)=[];
CO(nele+1:end,:)=[];
end